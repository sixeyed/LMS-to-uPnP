2.3.1
 - upon UPnP socket error, remove player at next update, don't need to wait timeout especially when playing
 
2.3.0
 - option <custom_discovery> to add non-standard UPnP queries
 - maybe a fix why some server or name were never updated (XML_UpdateNode bug)
 - display interface upon startup
 
2.2.3
 - in opus & vorbis direct decode mode, don't end before DISCONNECT and streambuf empty
 - fix sync loop (build-up issue) in vorbis & opus direct decode
 - more storage options

2.2.2
 - update various libraries
 
2.2.1
 - fix vorbis & opus end of stream
 - new icy mode (used for cast version)
 
2.1.23
 - proper clip in Vorbis raw Ogg mode (unused in this version)
 - end of decode compatible with raw Ogg mode
 
2.1.22
 - fix opus and vorbis failing to play with very large VorbisComment (artwork)
 
2.1.21
 - remove need of libmvec for x86_64 linux (libc "--disable-libmvec" and compiler with "-fno-fast-math")
 
2.1.20
 - use new libpupnp that fixes giant memory leak

2.1.19
 - move back to delaying STMd (30s by default)
 
2.1.18
 - release
 
2.1.17.1
 - increase discovery & auto-renewal timeouts which seems to improve stability a lot
 
2.1.17
 - libupnp should disable blocking connection (too many jobs)
 
2.1.16
 - don't delay stream in flow mode
 
2.1.15
 - delayed stream sock should only be sent once, if codec has not been acquired
 
2.1.14
 - release
 
2.1.13.6
 - missed nextURI fixed by a LMS "next" request rather an UPnP request
 
2.1.13.5
 - delayed stream log fix
 
2.1.13.4
 - don't disable "binding" when XML file does not exist
 
2.1.13.3
 - try to delay stream_sock to NextURI's HTTP request

2.1.13.1
 - don't call track_info if no track found
 
2.1.13.1
 - remove wait_underrun option which is too similar to no gapless. Still need to figure out what was the impact for HQPlayer
 - when missing duration, request next track immediately at end of decoding
 
2.1.13
 - release
 
2.1.12.11
 - fix group volume
 - remove PauseVolume (un-needed since plugin avoid volume to be set to 0 pause - too bad for Roon)
 
2.1.12.10
 - detect LMS mute correction
 
2.1.12.9
 - no fade-in/out at all on plugin or helper
 
2.1.12.8
 - potential build error
 
2.1.12.7
 - fix some variadic mistakes
 
2.1.12.6
 - remove "forced" mimetype test
 
2.1.12.5
 - fix once for all the TCPWindow size issue with Windows
 - cleanup notify/callback and use variadic
 - cleanup notify/callback and use variadic
 
2.1.12.2
 - move back to original stream as throttle can't work because client must send a FIN when server did send one 
 and throttle would prevent that to happen in time, creating a TIME_WAIT event and a RST frame on Windows
 - fix underrun logic

2.1.12.1
 - detect iface name
 - use SO_KEEPALIVE and SO_RCVBUF
 - better SSL handling in streaming thread

2.1.12
 - fix strings.txt
 - ensure throttling does not go overboard
 - fix mixed unsigned upconversion issue
 
2.1.11
 - don't hold streambuf mutex during sleep
  
2.1.10
 - move throttle down to stream thread
 
2.1.8
 - sourceforge sha issue
 
2.1.7
 - add NextURI "underrun" mode for problematic players
 - make sure we don't go below throttle threshold in one run
 
2.1.6
 - restore selection of binaries
 
2.1.5
 - always move to next streaming in slimproto
 
2.1.4
 - wrong PR
 
2.1.3
 - speed moderation (test version)

2.1.2
 - link for Windows users about VCREDIST
 
2.1.1
 - release

2.1.0.0
 - no more "next_delay" but instead wait until UPnP player requests track to start LMS streaming
 
2.0.7.3
 - don't use debug dll's

2.0.7.2 (P)
 - incomplete backport of log improvments
 
2.0.7.1
 - glibc is really static (-nss)
 - give a bit of love to log window
 
2.0.7
 - use non-debug dll's
 
2.0.6
 - universal binaries for MacOS
 - option to stop when pausing radio streams
 
2.0.5
 - add armv6
 
2.0.4
 - update libmdns
 
2.0.3
 - add arm64 for M1
 
2.0.2
 - copy of airupnp config code was causing players to be added all the time
 
2.0.1
 - new comp√Ælers to allow glibc starting 2.23
 - mips is bigendian by default
 
2.0.0
 - new build backend 
 - iface can be used for binding
 - many small changes...
 
1.82.2
 - fix protocolinfo all matches
 - remove TCP_NODELAY for last chunk
 
1.82.1
 - accept protocolinfo with all match
 - use TCP_NODELAY to send last chunk
 
1.81.3
 - output_http thread should wait for new_stream to be unset not for track_start as the latter can be missed if gain_and_fade is called while we sleep
 
1.81.2
 - no trace when offset is 0
 - check codecs looks for audio/<codec> or audio/x-<codec> explicitely
 
1.81.0
 - do an HTPP 200 on non-satisfiable range

1.80.4
 - wakeup from long sleep timer when start playing to detect play activity faster

1.80.3
 - mp3 mimetype is audio/mpeg
 - mimetypes audio/x-... where mishandled when setting "bridge-NN." extension

1.80.2
 - add proper opus DLLs
 
1.80.1
 - tweaks settings UI
 
1.80.0
 - add "null" encode mode
 
1.71.0
 - increase max sample rate
 
1.70.0
 - always release obuf when exiting output_thread 
 - abort current output thread when codec/process start fails
 - add flac_header type 3 where sample_count is adjusted based on first frame index
 - increase max sample rate
 
1.64.1
 - (P) callbackargs is an array
 
1.64.0
 - (P) don't fade-out on pause (no zero volume)
 
1.63.1
 - incorrect test to set duration to 0

1.63.0
 - fix repeating stream (RP)
 - enable icy for SONOS when repeating
 
1.62.2
 - fix profile's URL
 
1.62.1
 - do not use special http mode or respond with ranges to HEAD method
 
1.62.0
 - disable Sonos mode with icy
 
1.61.0
 - autostart and use static helper by default
 
1.60.0
 - refactor metadata handling, including removing need for 'E' tag (always use artwork_url seems fine now) and associated special query 
 
1.50.5
 - reset icy flag between tracks
 
1.50.4
 - better error message when UPnP cannot bind socket
 
1.50.3
 - minor info-bubble correction for image resizing
 
1.50.2
 - again a $^%!@ build error - this is painful
 
1.50.1
 - fix the infamous "HASH()" that appeared in some empty fields
 
1.50.0
 - add option to set coverart resolution
 
1.49.15
 - do not gather trackinfo unless playing is confirmed
 - on pause, do not restore volume if ignore volume was set
 - add mute management with negative volumes
 
1.49.13
 - fix sslsym macros that were still incorrect
 
1.49.12
 - rebuild
 
1.49.11
 - allow ICY for repeating streams as some BBC channels use repeating for programs and ICY inside for titles. This does not work for Sonos as ICY can only happen on webradio
 
1.49.10
 - Sonos returns a different URI than the one given for aac streams (replace x-rincon...::// by aac://)
 
1.49.9
 - order correctly STMu & STMd
 - STREAM_DELAY is now a runtime parameter
 - move back CLI buffer to 4kB (allocated)
 
1.49.8
 - handle players with spaces in ProtocolInfo
 
1.49.7
 - delay STMd with STMs, not STMu!!!!!!!!!!!!!
 
1.49.6
 - delay STMd by one cycle when STMu is required as well (Sonos)
 
1.49.5
 - must force Squeezebox2 to be loaded
 
1.49.4
 - recurse in hasOutputChannels
 
1.49.3
 - (P) remove "outputChannels" option from audio settings
 
1.49.2
 - silence CheckAndLock utility when device is NULL
 
1.49.1
 - SNI must be w/o any leading space or trailing garbage now that LMS excludes port
 
1.49.0
 - switch flac for main set
 - set estimated flac number of samples based on duration (when possible)
 
1.48.1
 - HTTP mode -2 was not sending content-length for large files
 - make kd_add a variadic
 
1.48.0
 - gapless option should offer an empty as well to allow default settings
 
1.47.0
 - openssl dynamic load compatible with 1.1.x
 
1.45.3
 - improving alac style while verifying code
 
1.45.1
 - remove un-necessary "buffer" variable in alac.c
 - guarantee alac writebuf size
 
1.45.0
 - aac buffer wrap only when needed
 - don't remove player that is currently playing

1.44.6
 - $*%&@! static version name !!!
 
1.44.5
 - alac stock decoder does not have aarch64 flag for endianness
 
1.44.4
 - bump version number
 
1.44.3
 - ports were missing when using LMS interface (use -b)
 - cosmetic issues in Settings' UI
 
1.44.2
 - fix migration of 1.44.0
 
1.44.1
 - just a fake increment
 
1.44.0
 - tweak below fix
 - change "upnp_socket" for "binding"
 - by default, HTTP server are not using UPnP port, unless specified
 
1.43.1
 - %&@!* of Linux does not handle sscanf with %[^:]:%u when the first string is empty

1.43.0
 - add '-o' on command line
 
1.42.1
 - server discovry response was truncated and CLIP was missing
 
1.42.0
 - SSL flags in stream_s
 - consolidation with other bridges
 
1.41.0
 - try SSL when plain fails on non 443
 
1.40.10
 - 'wav' codec was missing in HELO message
 
1.40.9
 - don't do WAV/AIFF header checking in Roon mode
 
1.40.8
 - deal with crappy UPnP player that responds malformed XMLGetFirstDocument
 
1.40.7
 - when searching for mad sync, verify that next frame is valid
 
1.40.6
 - do not block commands in off mode if we are still playing (volume ramp up/down)
 
1.40.4
 - linearize streambuf for large needed atoms crossing boundary or give-up

1.40.3
 - no need to flatten pcm header
 - stsz box can be really big, need to increase streambuf

1.40.2
 - bytes_per_frame must be in a context!
 
1.40.1
 - stop pcm decoder when bytes < bytes_per_frame
 - set bytes_per_frame in new_stream only
 
1.40.0
 - add 'wav' codec support
 - add WAV and AIF header parser in PCM
 
1.31.0
 - global model_name can be set (only on command line using -M) and default to UPnPBridge
 
1.30.0
 - add OggFlac

1.28.0
 - Reflect UPnP player name change to LMS, unless LMS has set its own name
 
1.27.0
 - search for mediarenderer:2 as well (x2 number of searches)

1.26.1
 - protect a few XMLFirstItem search against faulty players that return NULL
 
1.26.0
 - increase LMS max version

1.25.1
 - tabulate volume conversion
 
1.25.0
 - do not delete Sonos context when group is created to manage volume
 - volume is now a double to allow scaling in groups
 - do not use mute anymore when paused, let volume go to 0 and then restore it
  
1.20.2
 - use correct 'os' and 'osName' for freebsd
 
1.20.1
 - offer freebsd helper as well
 
1.20.0
 - add opus decoder
 - change vorbis codec min input
 - vorbis does not exit on no frame decoded
 
1.19.1
 - mad was using new decoder structure but librariy was not updated
 
1.19.0
 - alac.c did not set blocksize to NULL
 - faad should shift samles by 8 bits for mono channel
 - add LOOPBACK option
 - update Windows dll to remove msvc dependencies
 - (P) add -static version first
 
1.18.3
 - loopack option
 - free_ssl_symbol() does not do anything when LINAKLL set to avoid dlclose() link error
 
1.18.2
 - do nothing in sighandler when already stopping threads
 
1.18.1
 - Windows 10 does has renamed libeay32.dll to libcrypto.dll and ssleay32.dll to libssl.dll (and does not even include it)
 - do not crash when SSL not found
 
1.18.0
 - Add back removal timeout
 - (P) return if query is missing client
 
1.17.0
 - openSSL loaded manually for compatibility 
 
1.16.2
 - partial-reponse (206) include range with /* except for Sonos (instead of ONLY for Chromecast)
 
1.16.1
 - support SNI for SSL
 - use strcasestr instead of stristr
 - add help for + and - codecs syntax
 
1.16.0
 - device specific <codecs> and <raw_audio_format> cna use + or - in front of option to add or remove compared to default
 
1.15.1
 - add libeay.dll and ssleay.dll to the package
 
1.15.0
 - add SSL support
 
1.14.1
  - add time counter offset for players (Sonos) which reset elapsed time when icy data is received
  - remove some unused code/data (BusyDrop)

1.14.0
 - add 'E' tag parameter to get the browse url 
 
1.13.1
 - continuing SoundTouch saga ... player might not always reach duration, so need to add a timeout when close to end of track
 - add 'E' tag parameter to get the browse url
 
1.13.0
 - (1) if track ends up earlier than expected and next track is short, ShortTrack was not set
 - (1) add <nudge> parameter for Bose player to force a "next" when tracktime is > duration + nudge
 - (1) crossfade all we can at every step (don't need the whole fade buffer) and make room for process
 - (2) remove <nudge> and replace it by accept_nexturi == 2 to force gapped and stop when overtime
 - (3) add accept_nexturi -1 (stop and nudge) and 2 (next) for Bose and faulty devices
 - (4) go back to 'force' mode where play is enforced when overtime is detected
 - (5) wait 2s before playing next in 'force' mode
 - (6) undo (5)
 
1.12.0
 - Bi-directionnal volume filtering
 
1.11.2
 - do not use imageproxy for LMS < 7.8
 
1.11.1
 - short track shall workaround shall not be activated for 0 duration tracks

1.11.0
 - (1) refuse tracks less than 2s and gap tracks less than 10s
 - (1) cli_tag compare includes leading space
 - (1) exit output thread on 0 bytes only when player closes connection on failure (not on HEAD)
 - (2) accept to re-open socket even when draining (obuf management now allows it) - needed for CC and short tracks
 - (2) send STMd if STMu arrives while decoder is COMPLETE but not STOPPED (case where remote server closes the connection early)
 - (3) add repeatingstream option
 - (3) when url is missing fqdn, test "http" instead of IMAGE_PROXY and do not replace .png by .jpg
 - (3) remove superfluous send_icy_metadata
 - (3) if STMu is received when STMd not sent yet but should have, flush player and ignore STMu (this should trigger restart hopefully)
 - (3) undo right above mod as it's player's duty to restart
 - (3) detect URI change missed to nudge gapless players
 - (4) do not use the "repeating" metadata gathering for icy update (add -1 as offest option)
 - (4) remove SQ_SEEK in both domain as it's not used
 - (4) some clients (foobar2000 > 1.4.x) opens 2 sockets immediately and do a GET on both, then close the first one. That causes it to fail if some bytes have already been sent. In case of simple re-opening (not the CC or SOnos mode), reset the obuf pointer at the beginning. This should work as the obuf uses a large STUB which garantees that new data are not written unless at least the STUB amount has been sent to player
  
1.10.0
 - remove sleep timers for conditions
 
1.9.2
 - move all strings from basic.html to strings.txt
 - when getprotocolinfo fails, return an empty string to allow player creation
 
1.9.1
 - disable icy metadata when no send metadata disabled
 - add icy mode 2 to send only text, no artwork
 - use translation from strings.txt for Yes/No 
 
1.8.3
 - (1) xml_GetFirstItem descends through list until it finds something
 - (2) return NULL not "" in xml_GetFirstItem when nothing found
 - (2) remove range-request 
 
1.8.2
 - (1) move Roon Mode to squeezelite config size as Roon does report LMS version 7.7.5 but does not have tha AIFF header issue
 - (1) fake MAC was set to "cc" instead of "bb"
 - (2) cleanup profiles.xml
 - (2) set range-request to none, although some client still require ranges
 - (2) set optional sample rate, sample size, channels and size in DIDL-lite
 - (2) get channel from metadata
 - (2) hidden 'c' parameter
 - (2) add <stream_length> -2 which sets length only for PCM (when known)
 
1.8.0
 - (1) add DSD support in thru mode
  
1.7.6
 - Search for available HTTP port must be 2x MAX_PLAYERS
 - QueueFlush correction

1.7.5
 - Move mutex and cli_mutex creation/deletion out of the slimprot thread as Volume detection to make sure cli_send_cmd (volume) is not called before
 - cli_sock initialization must be done beofre slimproto thread starts (running set) and reset when switching/losing server must be mutex_protected

1.7.4
 - merge FriendlyName and Name in main context (FriendlyName is not a config item as such)

1.7.3
 - output_close was calling dlclose for each player termination
 
1.7.2
 - mad and flac correction, following squeezelite
 
1.7.1
 - sparc and ppc compiler required kernel > 3.2.0 due to glibc being 2.23+ ==> moved back cross-compiler to use glibc 2.19 (need OBSOLETE enabled)
 
1.7.0
 - (1) add battery information
 - (2) if ICY send is partial, do not try to send audio data
 - (3) test that Resp is not NULL before checking for ExInfo
 
1.6.3 
 - getsockoption for SO_REUSEPORT was resetting parameter
 
1.6.2
 - do not send any volume unless a real command has been sent by LMS
 - full cross-compiling
 
1.6.1
 - CODECS flags to allow compilation in thru mode only
 
1.6.0
 - add m4a to adts decoding in 'thru' mode
 - few alac issue correction
 - exit output_thread on streaming error only when HTTP connection is closed, no bytes sent and decoding completed (noy in the select/accept waiting loop)
 
1.5.0
 - add alac support
 
1.4.0
 - tail mode moved to obuf
 - obuf size fixed to 3MB with 2MB for tail
 - Sonos HTTP mode used for pause was not working (USER-AGENT changed)
 
1.3.2
 - renderer index could be captured from a previous track in case of fast play/stop/play sessions
 
1.3.1
 - flac compression level was not used from mode parameter
 
1.3.0
 - get cli port from server
 
1.2.2
 - only check codecs with UPnP capabilities in thru mode
 - make sure to default to thru if mode mispelled
 - eliminate unloaded codecs in full processing mode
 
1.2.1
 - mode was still comapred to "flac" and not "flc" in slimproto.c!
 
1.2.0
 - raw mode is tried (if enabled) in pcm mode even with incomplete sample size & rate by sending 'http-get:*:*' in UPnP header and send sending 
 the audio/L... with HTTP header. Sample size & rate are "guessed" from metadata, so might not work all the time
  
1.1.2
 - (skipped 1.1.1)
 - re-encode mode for flac is named 'flc', not 'flac'
 
1.1.0
 - add MP3 re-encoding
 - icy artwork removes ' - ' when no artist
 - reduce icy interval to 16384
 - forced_mimetypes was not used for checking codecs
 - fade-in/out was not working properly for short tracks in flow mode
 - transferMode.dlna.org has wrong case
 - shorter wait in select() if obuf has space and there is data to proceed
 - faulty player timing pushed to SQ_TIME to hide from slimproto
 - when ICY metadata was set, header string was not released
 - improve settings UI 
 - ICY metadata addition moved to output_thread so that obuf only contains data (needed when a HTTP close/open happens)
 - check mp3 sample rate & bitrate consitency
 - 24 bits packed processing as incorrect when a single frame was available or less than 2 frames were available in target
 - only one extra mimetype was taken into account
    
1.0.1
 - (1-2) start full icy metadata at the very begining ot HTTP response
 - re-activate artwork sending in icy metadata
 
1.0.0
 - full processing mode with flow
 - send STMd in case of streaming error (0 bytes)
 - many bug fixes
 
0.3.0.9
 - pcm format was not inserting rate & channel when it was missing in ProtocolInfo
 - (3) handling of < 0 sample rates
 
0.3.0.8
 - set STREAM_DELAY to 15s
 - fix 24 bits replay gain 
 - codec list is "flc,aif,pcm,mp3"
 
0.3.0.7
 - set AccuratePlayPoints to false

0.3.0.6
 - 32 bits comparaison correction (volume could be stuck)

0.3.0.5
 - add aarch64 version
 
0.3.0.4
 - (1) slimproto_close must join thread, not detach it otherwise other _close function might destroy buffer mutexes
 - (1) move to "status" cmd query to have only a single query for all metadata
 - (1) metadata path and track_has removed
 - (2) duration can be taken from "status" as well
  
0.3.0.3
 - device with no ServiceURL caused a NULL access while searching fro NextTRansportInfo
 - when ProtocolInfo was not found, friendlyName memory was not released
 
0.3.0.2
 - mimetype delayed acquisition in output_http is a boolean, relying now on out->mimetype
 - dlna features is a function call instead of a field in output structure (a bit cleaner)
 - when destroying device that was stuck in cli_send_cmd called by sq_notify, then when the sq_wipe was called, cli_mutex was already destroyed when releasing it
 - read_line for http server timeout up to 200ms
  
0.3.0.1
 - forced_mimetypes parameter should use "%s" format string as it can be empty
 - (P) Misc correction in help strings
 - ProtocolInfo parsing was crashing if sink was ending by a serie of ','
 - More liberal parsing of raw PCM (audio/Lxx)
 - Need to respond to getContentFeatures.dlna.org (pretty ugly patch)

0.3.0.0 
 - rewrite of most of the core code: 
		- no use of libupnp webserver anymore
		- own HTTP server for fine control (only -1 and -3 mode now)
		- streaming moved to modified squeezelite part of code
		- remove temporary file buffering		
 - add <forced_mimetypes> to allow format that are not normally authorized by player (i.e flac or aac)		
 - use proprietary Sonos format when streaming froma  mp3/aac radio ==> icy works
 - new handling of UPnP discovery for on-the-fly player addition / removal (no more discovery time and removal counts)
 - Review of all mutex-related issue and various risk of unprotected code
 - review of memory leaks 
 - add possibility to dump players ('dump' & 'dumpall' commmands)
 - cli_send_comment uses timeout in connect (for freebsd)
 - (5) when missing codec, thru flag must be set otherwise output.c tries to use the encodebuf
 - (5) duration and ms_played status acquisition was protected by wrong mutex-related
 - (5) in main.c, LOCK_O/UNLOCK_O was empty
 - (6) while streaming, HTTP server shall not close connection if socket read ready but no data is received 
 - (7) roll back to (5)
 - (7) do not add HTTP header "Accept-Range: none"

0.2.15.1
 - correct memory leak is isMater and GetGroupVolume
 - no more wait loop for GetProtocolInfo, make it a sync call
 
0.2.15.0
 - add a "restart" button
 - always remove a player when BYEBYE is received

0.2.14.3
 - default name is zone name for Sonos device
 
0.2.14.2
 - proper elimination of slave Sonos devices (including surroung setup)
 
0.2.14.0
- detect Sonos groups and do not add slaves
- add Sonos groups volume

0.2.13.0
 - HasDigitalOut =1 so that volume can be blocked
 - small code cleaning
 
0.2.15.5
 - update renderer thread cleaned for better exit
 - memory leaks correction
 - code cleaning

0.2.12.4
 - remove earlySTMD option
 - read_file needed to declare ready_buffering
 - (P) do not save config file if it does not already exist
 - another silly mistake in 32 bits timer comparison :-(
 - clean UPnPinitialize
 - only send metadata if requested, even for live broadcast
 - cleanup code to be closer to AirConnect
 - Reset state to UNKNOWN only when needed, otherwise a fake STOP is detected on slow players

0.2.12.3
 - correct timegaps using gettime_ms() to manage 32 bits rollover
 - clean settings.pm to make it more readable
 
0.2.12.2
 - Initial server detection should be in slimproto thread, otherwise sq_run_device can block 
 
0.2.12.1
 - When a players sends BYE-BYE, set missing counter to 0 to make sure it will be removed at next search
 - Update file headers
 - do not try to add flac header when "reserved" bit is set (TIDAL) 
 - early_STMD is now a runtime configuration
 - correct some strings
 - TIDAL does not work when long HTTP streaming pause, use pacing_size only with *live* streams to avoid them (showed more frequently with EARLY_STMD)
 - clean SendARP
 - when renewal fail, race condition could occur if player was destroyed 
 - manually renew subscription when auto-renewal fails
 - make sure MAC is unique across devices

0.2.12.0
 - set UPnP max HTTP/SOAP content *after* stack initialization
 - always gap remote stream to avoid large buffer to be created
 - renaming a few variables for better clarity
 - optimize nextURI usage by requesting next track much earlier
 - solve problem when SetNextURI arrives too late by using <min_gapless>
 - Big fat cleanup of all old useless squeezelite items (RESAMPLE, DSD, PROCESS, decoder, mode, codecs)

0.2.11.3 <not published>
 - ICY update url built correctly when using imageproxy
 - add "_safe mode" and "_normal mode" to profiles.xml
 - reset ExpectStop only when receiving a "PLAYING" state confirm
 - allow "stop" from remote to stop LMS (will not work in the last 5 seconds of playback)
 - when fake size HTTP length is required (Sonos), stop the player from trying to re-open the file once it has all been sent
 - on Windows, retry sending on CLI command socket as it fails with ENOTCONN sometimes at first send after opening ...
 - development versions now have an extra digit to enable auto-update
 
0.2.11.2
 - When using LMS as image proxy, artwork_url must be prefixed with http://<server>:<port>

0.2.11.1
 - When player properly disconnects (sends a bye-bye) event, it was not removed from list

0.2.11.0
 - <stream_length> enhanced to support HTTP mode by codec
 - update profile.xml for Sonos using the above
 
0.2.10.7
 - do not remove missing player when remove_count is set to 0
 - limit sample rate when slimproto sends a rate above max_supported
 - in the UI, rename 'default parameters' to 'common parameters'

0.2.10.6
 - when IP address of <common> was set, all devices were forced we the same address
 - correct XML updating of <name>
 
0.2.10.5
- add Linux sparc support (experimental)

0.2.10.4
 - re-introduce armv5te with soft floating only
 - limit the binary offering to what's supported by the platform
 - option to force use of LMS network interface (GUI and -b on command line)

0.2.10.3
 - move to cross-compilation chain to solve rpi-1 compatibility
 - detect float problem at startup
 
0.2.10.1
 - Do not seek if range if larger than received data (should help case of fixed larg size when "smart players" try to seek to end of the song to guess the side)
 - armv6 and above compilation

0.2.10.0
 - add <roon_mode> for Roon compatibility (default on and no cli use)
 - buffer directory properly logged

0.2.9.5
 - get_time/set_time and get_metadata were not re-opening CLI socket (testing it before)

0.2.9.4
 - force non gapless for track below <min_gapless> to be treated with non gapless method (workaround for some faulty players)
 - too many CLI socket were consumed when all bridges were opened - open on demand and close after 10sec
 - seek offset trace had wrong format (%zu)
 
0.2.9.3
 - when "friendlyName" is missing (should never happen ...), replace it with UDN 
 
0.2.9.2
 - when using "songinfo" query, LMS wants a client_id, although documented differently
 - max_read_wait fixed at 20s
 - add pacing option to prevent buffering to be greedy (use <pacing_size>)
 - cli_wait set at 1s
 - Refresh of configuration file was not adding missing parameters
 - (dev-3) Handle PPC byte ordering
 - (dev-5) sq_seek log not using proper int (off_t) size on 64 bits platforms
 - (dev-6) armv5 renamed armv5-el
 - (dev-6) setname was not working when device was powered off
 - (dev-6) re-connect if CLI socket is closed
 - (dev-7) cli_send_cmd returns immediately in case of socket error (no wait)
 - (dev-7) server address is memorized on LMS change
 - (dev-8) CLI commands can return empty string !
 - (dev-8) path can be NULL in metadata if index is wrong
 - (dev-9) cli_cmd parser checks for exact sent string as LMS seems to send garbage at the beginning from time to time
 
0.2.9.1
 - Player name set from LMS are now persistent, no need to set it from the plugin settings
 - adding <friendly_name> parameter to keep trace or true player name
 - Player auto refresh could be in conflict wihh external modifications

0.2.9.0
 - move <server> parameter from global to <common> (parameter copy for compatibility needs to be removed later)
 - fix server switch & rediscovery
 - add -x64 static version
 
0.2.8.0
 - if MAC cannot be retrieved, create a fake one from UDN
 - force first 2 bytes of MAC to be 0xbb unless <mac_address> is set in config file
 - remove <base_mac> parameter
 
0.2.7.4 (not released)
 - in stream thread, endtok static parameter was breaking multi-thread !
 - hash32 check for NULL string
 (dev-2): when receiving and unsollicited stop in paused mode, do not generate an error as it would lead LMS to move to next track

0.2.7.3
 - Free device search was missing ;
 - Filter out result of old status update after a play/pause/stop has been required
 - Stop requesting status update while waiting for  play/pause/stop
 - remove ppc build
 - (dev-2) Log system re-organization
 - (dev-3) Duration shall not be adjusted when playing a live stream
 - (dev-4) Gathering metadata while rescanning library caused a NULL pointer usage
 - (dev-5) Add <allow_flac> to allow usage of flac even if ProtocolSink does not specify it
 - (dev-5) When LMS was rescanning, an overflow happended during metadata gathering
 - (dev-7) mutex timeout value for double GET was wrong (nano seconds overflow)
 - (dev-8) search serviceType without the version:1 to take the most recent one
 - (dev-9) using wrong serviceType in dev-8
 - (dev-10) using AV_TRANSPORT was missing :ver
 - (dev-11) force soft float point on armv5
 - (dev-12) buffer mutex was left locked if sq_close was not called, causing dead lock

0.2.7.2
 - minor changes
 
0.2.7.1
 - Add ReplayGain for uncompressed format
 - Corrected memory leak when no matching codec was found
 
0.2.7.0
 - UPnP actions are now in a queue and processed after previous has been acknowledged
 - User Guide update
 - Add build date/time to version
 - When streaming a webradio using wav format, pseudo file size was not set properly
 - MAC address parameter was not read properly in config file (was overflowing on <send_icy> parameter)
 - Always gather metadata from LMS, <send_metadata> only stops sending of coverart, album, artist and title 
 - Tracks over one hour where rolling over to 0 
 - Remove vorbis_comment header in repositioning (check that is was needed for NamUniti)
 - <max_read_wait> can be set to -1 for infinite wait of LMS audio data 
 - Add (-5) HTTP streaming mode that forces a buffering of the whole audio file before answering HTTP GET request. Allows to send a real size to player (for webradio, a fake size is sent)
 - Add powerpc build (static and dynamic)
 - Volume changes detected and forwarded back to LMS
 - Volume feedback to LMS when changed on the player can be disabled by <volume_feedback>
 - Use 'old gain' for volume to avoid using 'volume curve'
 - Enable icy metadata (streaming radio title changes) for players that support it
 - add <send_icy> to control usage of icy metadata
 - Few small memory leaks fixed
 - Use remote artwork when available instead of coverid
 - Artwork was not set when LMS server address was not discovered (when set in XML config file)
 - Always discover server even if ip:port is set in XML config file
 - Add <autoplay> to start playing automatically on power on
 - remove DLNA.ORG_OP field as byte seek and time seek are not supported
 - add <byte_seek> option to authorize players to close/re-open connection on pause and seek in byte
 - SET_URI/SET_NEXTURI code factorization (remove 2 steps)
 - time in squeeze2upnp handled in ms instead of s
 - in Linux the mutex timeout for sq_open could be set wrong
 - on MR deletion, unlock mutex before joining
 - UPnP auto-renewal timeout of 30s instead of 300s
 - Device is not removed as long as subscription is auto renewed, even if it missed UPnP discovery
 - When receiving on/off, do not force a STOP anymore
 - Remove <force_volume> parameter
 - Remove <pause_volume> parameter and replace it by SetMute function
 - use QEMU for all builds except Windows and OSX
 - (P) update some strings
 - (P) add ICY metadata option
 - (P) set log lines to 1000
 - (P) add byte_seek option
 - (P) some comment/help cleaning
 - (P) hyperlinks to log, config and guide were potentially system-wide conflicting
 - (P) <max_read_wait> accessible from configuration screen
 - (P) add armv5 static and powerpc builds management
 - NB: with -5 HTTP streaming, it seems that some players do not detect properly the end of re-positionned flac files

   
0.2.5.0
 - in XMLFindAndParseService search ends if a service list is empty. It should end only when no service list remains
 - Set HasDigitalOut=0 in capabilities to prevent volume from being set to max and sent to player
 - in capabilities, ModelName is "squeeze2upnp"
 - Add coverart to UPnP metadata and <send_coverart> parameter to disable it 
 - Add duration to UPnP metadata
 - For wav and aiff, file size in header is now real and based on duration in all cases (including during repositioning)
 - When sending uncompressed using 'large file size", the HTTP size contains a real size base on duration if available
 - Remove a race condition where player did not have the time to buffer data when SetNextURI arrived late. Now give a queued 'nudge next'
 - Remove thread unsafe use of globals for on-the-fly wav and aiff header reconstruction
 - When using aac, content-type shall always be "audio/aac" even if ProtocolInfo has m4a (works with foobar, not yet with Sonos)
 - Change detection of endianness and aiff header bug (version < 7.8, only for *native* aif file)
 - Still a bug on aiff header detection when moving player live from a < 7.8 to a 7.9
 - L24_format can be set to 3 to force truncation only when using raw sample and audio/L24 is not found in protocolinfo
 - (P) correct profile nested structure overloading logic
 - (P) add option to disable coverart
 - (P) add a 30s surveillance timer to check that squeeze2upnp is still running
 - (C) it is not possible to differentiate a user stop from a end of track stop, so by default sq2u moves to the next track if any

0.2.4.0
 - add ARMv5 binary
 - When creating a UPnP renderer, set state(s) to STOP
 - Some players (moode) open the URL on SETURI, then close and re-open it on PLAY. But re-open might be received before close (due to threading), causing confusion with a double-open request. So use a mutex with timeout in sq_open
 - create a fake pthread_mutex_timedlock for OSX
 - Send SetPlayMode to NORMAL at each play (some players by default are in auto_repeat mode)
 - DLNA.ORG_OP set to 00 (limited random availability) 
 - cli_send_cmd must return NULL only if command is not responded, otherwise allow respond with an empty string
 - sq_set_time: double format shoudl be %.1f not %.1lf
 - Do not send self-generated volume command on unpause, wait for the real volume request
 - Add <null_volume> when set (default) allow 0 to be set as volume
 - (P) increase web UI log line to 200
 - (P) manual now available to view in a web browser tab
 - (P) add option to delete a player
 - (P) enable/disable from the list did not work if selected player was 'default'

0.2.3.0 (plugin)
 - when log is disable, no log shall be generated eveen if extra debug options are set
 - space char instead of thab on line 186

0.2.3.0
 - changing naming
 - cleaning LOG
 - AIFF problem is for all versions before 7.9
 - AIFF partial header' in not sent in LMS < 7.9 when transcoding happens, so try to detect source file format
 - aif removed from default codec list, too troublesome
 - fwrite for 24 bits pcm was not using adjusted buffer size
 - Support fully AIFF => build header on the fly
 - Use TrackURI from GetPositionInfo and not from GetMediaInfo - this is more reliable and saves one polling UPnP request 
 - by default, only use pcm in <raw_audio_format> because wav and aiff require a filesize and some players are stuck on the current URI when the whole size has not been received
 - Some players do not fill "TrackURI" so get it from "TrackMetaData"
 - add <log_limit> to limit the size of logfile
 - by default, codecs are <pcm,aif,flc,mp3>
 - Send a STOP to playing renderers at exit - critical otherwise libupnp does not stop (deadlock)
 - when checking codecs list, 'aif' was not in the matching list for 'aif' (only audio/L and wav)
 - In LMS 7.7, when sending pcm in AIFF format, there is an 8 bytes header to skip if the data is forwarded as PCM or WAV. Does not exist in 7.9 (don't know for 7.8)
 - Query LMS version at discovery do differentiate between different AIFF option
 - add option 2 to L24_format to truncate 24 bits in 16 bits for players that do only 16 bits (only for pm/aiff, not flac)
 - MainThread only sleeps 1 sec to speed up exit
 - optimize endianness changes

0.2.2.2 (not published)
 - XML special char were not properly handled in DIDL header ==> moved to a full XML constructor, not a sprintf patch
 - using autosave, only <device> sections are written unless there is no existing config file
 - removed memory leak in SaveConfig (nodelist using wrong free)
 - add the full channel and sample rate in DIDL header, not only in content-type
 - OSX version is now multi-architecture, named squeeze2upnp-osx-multi
 - Some players do not set "CurrentURI" properly in GetMediaInfo. Use the "CurrentURIMetaData" and parse it instead
 - Added partial AIFF support (not sending AIFF to player but accepting AIFF=PCM from LMS) ==> less byte-reordering needed
 - Codecs capabilities send to LMS only include codecs supported by UPnP player
 - added <raw_audio_format> as a comma-separated, ordered, list of file format sent to UPnP players amongst (pcm, aif, wav)
 - added <match_endianness> to try to match (within the priority of <raw_audio_format> byte orders between LMS and player to avoid CPU consuming byte re-ordering


0.2.2.1
 - mac_size in AddMR was wrong type causing a stack corruption on WinXP
 - version now works for XP and above

0.2.2.0
 - <buffer_dir> can be '?' (w/o the '') to enable use of default system "temp" dir (this is the default now instead of '.')
 - config parameters with incorrect values (buffer_size) no longer re-written with corrected values in config
 - config file generating (-i or 'save'  while running )do not erase existing players
 - add command line option '-Z' to disable interactive mode, allowing backgrounding using '&' in Linux (no more consumes 100% CPU)
 - buffer files are now deleted each time user stops a playback unless new parameter <keep_buffer_file> is set to 1
 - add <max_volume> parameter to scale and limit the <volume_curve>. Any value calculated from volume curve is scaled by <max_volume>/100
 - Window version is renamed squeeze2upnp-win
 - add -I command line option to auto-save config file at each scan
 - some players trigger false detection of URI change by reporting empty nextURI, so check the nextURI contains "-idx-" pattern
 - when saving an existing device, the UPnP friendly name was used, even if a different name was set in configuration
 - add -k option to force immediate exit on SIGINT, SIGQUIT and SIGTERM
 - handle SIGINT, SIGQUIT and SIGTERM properly

0.2.1.0
 - <upnp_scan_timeout> at 0 was not disabling scan
 - added <upnp_remove_count> parameter to remove a device only N times after failed re-discovery
 - add Ralphy's patch (SendARP) to compile for OSX
 - reset read pointer in sq_read by calling fseek

0.2.0.1
 - Race condition where a upnp poll-response can be interrupted by the update thread that removes that device - locking a non-existing mutex happens then
 - Handle 24 bits mono tracks with PACKED format
 - when <send_metadata> was disabled, some default metadata were not initialized (was missing backport from 0.1.4.0)
 - very quick pause/unpause created an infinite loop (created by fixing dealock issue between upnp notification and LMS playback in 0.2.0.0)
 - on quick unpause/pause, the pause command was ignored - can be irritating if unpause was pressed by mistake

0.2.0.0
 - each player uses own timer thread to poll position, track and related info instead of a single thread for all players
 - upnp rescan dedicated thread created at each scan interval to avoid blocking libupnp caller thread in callback
 - continue re-organizing LOG
 - metadata using "songinfo" CLI command to allow access to more information, includign albumart (still fallback to use "playlist" info if "songinfo" fails)
 - on <accept_next_uri> = 0, metadat was not properly handled, leading to random filesize being sent
 - add <upnp_scan_timeout> to configure how long a network player *rescan* lasts (initial scan is still 15)
 - <upnp_scan_interval> is 30 seconds minimum
 - When skipping track very quickly, a "playing" state of previous skip could be received before the "stopped" state or last skip, causing player to stall (confused with an unsollicited play)
 - force_volume was used, even when volume_on_play was set to -1 in SyncNotifyState
 - option -i was broken before a5 release
 - context index toggle shall be done after stream mutex lock (slimproto)
 - remove deadlock between upnp notification and LMS playback request (sq_notify call in SyncNotifyState)
 - global Mutex for renderer list un-necessary now that list is a table
 - change some string definition to allow VC2008 compilation
 - add the option to set a socket for upnp operations


0.1.4.0
 - <volume_on_play> can be set to -1 so that *all* LMS volume commands are ignored (use the player's volume control)
 - When pause/play directly on the player, action is feedback to LMS that should stay in sycn (still early phase ...). This does NOT work when "stop" is being used - such "stop" will be interpreted by LMS as an error and will move to next track
 - if uPnP player cannot play a format, send the proper error code to LMS (also send STMc everytime) == > that's to avoid being stuck in a middle of a playlist - LMS will gently move to the next song and a squeeze2upnp will just log the problem
 - add <flac_header> parameter
 - add <send_metadata> parameter
 - add <upnp_scan_interval> paramater (O to disable regular scan)
 - building a Linux statically linked version as well (-static)
 - <seek_after_pause> now 0,1 or 2 (2 restarts stream from that last sent byte - will stay undocumented as it does not seem to work)
 - add -4 for <stream_length> to allow usage of unkown file size to be sent *but* not using chunked-encoding (need updated libupnp webserver.c and httpreadwrite.c), responding to open-ended request (xxx-) by HTTP 206 and range xxx-yyy/*
 - add -1 for <stream_length> to allow usage of unkown file size to be sent *but* not using chunked-encoding (need updated libupnp webserver.c and httpreadwrite.c), responding to open-ended requests (xxx-) by HTTP 200 instead of 206
 - add -2 for <stream_length> to allow usage of chunked-encoding (need updated libupnp webserver.c and httpreadwrite.c), and responding to open-ended requests (xxx-) by HTTP 200 instead of 206
 - update DIDL-lite header to add DLNA namespace, <upnp:artist>, trackNumber and tweak other parameters
 - <mac> added to each device. As pointed by ralphy, current logic was not working properly. Now, if mac predecence is 1/ mac from <device>, then mac from ARP network request, then mac from <base_mac> + n (Nth player). when "save <filename> is called, the <mac> is re-written for every device. 
 - add command line "-i <config file>" to discover upnp players, save config file, then exit
 - add command line "-p <pidfile>" to store the pid
 - "unexpected" stops managed from squeelite side instead of uPnP (NB: a "stop" from the player"s remote will cause LMS to move to next track, NOT to stop
 - if <buffer_limit> is smaller than max(<streambuf_size>, <outputbuf_size>) * 4, set it to that max
 - <can_pause> parameter removed
 - big fat warning when config file has an error and cannot be loaded
 - improve HTTP range request response (might have impact with <buffer_limit> and pause reaction)
 - Update COMPATIBILITY file
 - remove all warning for Linux compilation
 - "cookie" is now a proper pointer, no more integer cast
 - configure libupnp with disabled blocking TCP connection and gen GENA timeouts to avoid "disapearing players" to lock the job queue, ending to a "too many jobs" disaster in libupnp
 - Stop sending poll request to a player that has generated more than 5 consecutives ACTION_ERROR (has disappeared probably)
 - for each player, check that <buffer_dir> is accessible in WRITE mode (and remove device if it is not)
 - Improved cleanup on exit() to avoid coredump 
 - Improved LMS device deletion when upnp device disappears 
 - When the same uPnP player disappears and re-apppears, re-connect was not working
 - Removed all memory leaks found by valgrind
 - metadata request can cause a fault if the list has been emptied (modulus 0 call)
 - when disabled, metadata gathering was causing fault. 
 - take into account metadata config as well when accept_nexturi is disable
 - sq_get_metadata must fill metadata in all cases, no NULL can be returned 
 - start to re-organize LOG levels
 - prepare metadata gathering for artwork and extended information (like filesize)
 - 64 bits int printed with %Ld for arm
 - divide by 0 on volume removed (was causing volume command 0 ==> 255)
 - volume calculation does not use float anymore (integer arithmetic only)
 - <volume_curve> ending pair changed so be (0x7fffffff,0x7f) to work with integer arithmetic
 - initialize a string in AddMRDevice


0.1.3.3 
 - with <seek_after_pause> set to 1, unpause was not restarting at the right time if repositionig was done during pause
 - when upnp device capability for pcm does not detail sample rate and channel (ie audio/L16), add the channel and rate details in the mime-type response (ie audio/L16;channels=2;rate=44100) - was need for foobar2000
 - add aac in the supported format (does not seem to work with Sonos or foobar yet)
 - <volume_on_play> to 1 by default
 - <volume_curve> max by default is 65536 instead of 65535
 - check that squeezelite instance was created before trying to run it
 - L/R inversion corrected in PCM 24 bits, packed type 1
 - buffer write file opening done as soon as LMS play command is received (quick GET)
 - in flac metadata (for repositionning) vorbis header is needed to NamUniti
 - flac header in re-positioning was not set as "last block = 0x80" (happened after vorbis_comment was removed)
 - handle case where no playlist index is returned in metadata (crash)
 - metadata track and time request were doubling the '?'
 - add metadata 
 - change incorrect upnp:artist to dc:creator in DIDL string
 - change back flac header re-insertion default max block size to 0xfff
 - remove a few compiler warning
 - improve the "synchronous start" (continuous synchro does not work)

0.1.2.0
 - add a wav header to pcm stream for players that accept audio/wav, audio/x-wav and audio/wave in protocol info by do not accept audio/Lxx (xx = sample size).Was needed for Sonos to receive pcm samples. Endianness pobably need more attention
 - re-organize format detection code for wave header addition
 - suppress DIRECT mode (was useless)
 - correct some coredump on exit (access to invalid file handles)